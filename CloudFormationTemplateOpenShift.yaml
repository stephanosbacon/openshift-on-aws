AWSTemplateFormatVersion: '2010-09-09'
Metadata: {}

Parameters:
###########
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
  AvailabilityZone:
    Description: Availability zone to deploy
    Type: AWS::EC2::AvailabilityZone::Name
  DeployGluster:
    Description: set to true in order to deploy 3 additional gluster nodes and volumes
    Type: String
    AllowedValues: [true, false]
    Default: false

Mappings:
#########
  RegionMap:
    us-east-1:
      CentOS7: "ami-4bf3d731"
#    us-east-2:
#      CentOS7: ...

Conditions:
  ShouldDeployGluster:
    !Equals [true, !Ref DeployGluster]

Resources:
##########
  openshiftvpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 192.168.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: openshift-cf-vpc

  internetgatewayos:
    Type: AWS::EC2::InternetGateway

  gatewayattachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref internetgatewayos
      VpcId: !Ref openshiftvpc

  subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref openshiftvpc
      CidrBlock: 192.168.0.0/24
      AvailabilityZone: !Ref AvailabilityZone

  routetable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref openshiftvpc

  subnetroutetableasoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
     RouteTableId: !Ref routetable
     SubnetId: !Ref subnet

  route:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref routetable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetgatewayos

# master node

  openshiftmaster:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: openshift-master
        - Key: kubernetes.io/cluster/openshift-on-aws
          Value: openshift-on-aws
      InstanceType: t2.xlarge
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref subnet
          GroupSet:
             - !Ref mastersecgroup
             - !Ref clusterchatter
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CentOS7]
      BlockDeviceMappings: [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": "io1",
              "Iops": "300",
              "DeleteOnTermination": "true",
              "VolumeSize": "50"
            }
          }
        ]

# worker nodes

  openshiftworker1:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: openshift-worker1
        - Key: kubernetes.io/cluster/openshift-on-aws
          Value: openshift-on-aws
      InstanceType: t2.xlarge
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref subnet
          GroupSet:
             - !Ref workersecgroup
             - !Ref clusterchatter
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CentOS7]
      BlockDeviceMappings: [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": "io1",
              "Iops": "300",
              "DeleteOnTermination": "true",
              "VolumeSize": "50"
            }
          }
        ]

  openshiftworker2:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: openshift-worker2
        - Key: kubernetes.io/cluster/openshift-on-aws
          Value: openshift-on-aws
      InstanceType: t2.xlarge
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref subnet
          GroupSet:
           - !Ref workersecgroup
           - !Ref clusterchatter
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CentOS7]
      BlockDeviceMappings: [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": "io1",
              "Iops": "300",
              "DeleteOnTermination": "true",
              "VolumeSize": "50"
            }
          }
        ]

# gluster nodes

  openshiftgluster1:
    Type: 'AWS::EC2::Instance'
    Condition: ShouldDeployGluster
    Properties:
      Tags:
        - Key: Name
          Value: openshift-gluster1
        - Key: kubernetes.io/cluster/openshift-on-aws
          Value: openshift-on-aws
      InstanceType: m4.xlarge
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref subnet
          GroupSet:
           - !Ref workersecgroup
           - !Ref clusterchatter
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CentOS7]
      BlockDeviceMappings: [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": "io1",
              "Iops": "300",
              "DeleteOnTermination": "true",
              "VolumeSize": "50"
            }
          }
        ]

  openshiftgluster2:
    Type: 'AWS::EC2::Instance'
    Condition: ShouldDeployGluster
    Properties:
      Tags:
        - Key: Name
          Value: openshift-gluster2
        - Key: kubernetes.io/cluster/openshift-on-aws
          Value: openshift-on-aws
      InstanceType: m4.xlarge
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref subnet
          GroupSet:
           - !Ref workersecgroup
           - !Ref clusterchatter
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CentOS7]
      BlockDeviceMappings: [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": "io1",
              "Iops": "300",
              "DeleteOnTermination": "true",
              "VolumeSize": "50"
            }
          }
        ]

  openshiftgluster3:
    Type: 'AWS::EC2::Instance'
    Condition: ShouldDeployGluster
    Properties:
      Tags:
        - Key: Name
          Value: openshift-gluster3
        - Key: kubernetes.io/cluster/openshift-on-aws
          Value: openshift-on-aws
      InstanceType: m4.xlarge
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref subnet
          GroupSet:
           - !Ref workersecgroup
           - !Ref clusterchatter
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CentOS7]
      BlockDeviceMappings: [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": "io1",
              "Iops": "300",
              "DeleteOnTermination": "true",
              "VolumeSize": "50"
            }
          }
        ]

# docker volumes

  volume1:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt openshiftmaster.AvailabilityZone
      Size: 50
    DeletionPolicy: Delete

  volat1:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: '/dev/xvdb'
      VolumeId: !Ref volume1
      InstanceId: !Ref openshiftmaster

  volume2:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt openshiftworker1.AvailabilityZone
      Size: 50
    DeletionPolicy: Delete

  volat2:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: '/dev/xvdb'
      VolumeId: !Ref volume2
      InstanceId: !Ref openshiftworker1

  volume3:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt openshiftworker2.AvailabilityZone
      Size: 50
    DeletionPolicy: Delete

  volat3:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: '/dev/xvdb'
      VolumeId: !Ref volume3
      InstanceId: !Ref openshiftworker2

  volume4:
    Type: 'AWS::EC2::Volume'
    Condition: ShouldDeployGluster
    Properties:
      AvailabilityZone: !GetAtt openshiftgluster1.AvailabilityZone
      Size: 50
    DeletionPolicy: Delete

  volat4:
    Type: AWS::EC2::VolumeAttachment
    Condition: ShouldDeployGluster
    Properties:
      Device: '/dev/xvdb'
      VolumeId: !Ref volume4
      InstanceId: !Ref openshiftgluster1

  volume5:
    Type: 'AWS::EC2::Volume'
    Condition: ShouldDeployGluster
    Properties:
      AvailabilityZone: !GetAtt openshiftgluster2.AvailabilityZone
      Size: 50
    DeletionPolicy: Delete

  volat5:
    Type: AWS::EC2::VolumeAttachment
    Condition: ShouldDeployGluster
    Properties:
      Device: '/dev/xvdb'
      VolumeId: !Ref volume5
      InstanceId: !Ref openshiftgluster2

  volume6:
    Type: 'AWS::EC2::Volume'
    Condition: ShouldDeployGluster
    Properties:
      AvailabilityZone: !GetAtt openshiftgluster3.AvailabilityZone
      Size: 50
    DeletionPolicy: Delete

  volat6:
    Type: AWS::EC2::VolumeAttachment
    Condition: ShouldDeployGluster
    Properties:
      Device: '/dev/xvdb'
      VolumeId: !Ref volume6
      InstanceId: !Ref openshiftgluster3


# gluster volumes

  gvolume1:
    Type: 'AWS::EC2::Volume'
    Condition: ShouldDeployGluster
    Properties:
      AvailabilityZone: !GetAtt openshiftmaster.AvailabilityZone
      Size: 50
    DeletionPolicy: Delete

  gvolat1:
    Type: AWS::EC2::VolumeAttachment
    Condition: ShouldDeployGluster
    Properties:
      Device: '/dev/xvdc'
      VolumeId: !Ref gvolume1
      InstanceId: !Ref openshiftgluster1

  gvolume2:
    Type: 'AWS::EC2::Volume'
    Condition: ShouldDeployGluster
    Properties:
      AvailabilityZone: !GetAtt openshiftworker1.AvailabilityZone
      Size: 50
    DeletionPolicy: Delete

  gvolat2:
    Type: AWS::EC2::VolumeAttachment
    Condition: ShouldDeployGluster
    Properties:
      Device: '/dev/xvdc'
      VolumeId: !Ref gvolume2
      InstanceId: !Ref openshiftgluster2

  gvolume3:
    Type: 'AWS::EC2::Volume'
    Condition: ShouldDeployGluster
    Properties:
      AvailabilityZone: !GetAtt openshiftworker2.AvailabilityZone
      Size: 50
    DeletionPolicy: Delete

  gvolat3:
    Type: AWS::EC2::VolumeAttachment
    Condition: ShouldDeployGluster
    Properties:
      Device: '/dev/xvdc'
      VolumeId: !Ref gvolume3
      InstanceId: !Ref openshiftgluster3

# security groups, etc.

  clusterchatter:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref openshiftvpc
      GroupDescription: Security group for all the kubernetes nodes so they can chatter

  clusterchatteringress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref clusterchatter
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref clusterchatter
    DependsOn: clusterchatter

  workersecgroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref openshiftvpc
      GroupDescription: Security group for the worker Kubernetes nodes
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  mastersecgroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref openshiftvpc
      GroupDescription: Security group for the master Kubernetes node
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '8443'
        ToPort: '8443'
        CidrIp: 0.0.0.0/0
# This makes edge terminated routes work
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0

